@create boons wrapper=10
&CON.SCRIPT.PATH boons wrapper=domain/index.js
&CMD.BOON.GRANT boons wrapper=$^\+boon/grant(/private)? (.+)=(.+)$:@assert !comp(type(*%2), PLAYER)=@pemit %#=%2 is not a player.;[setq(from, objid(%#))];[setq(to, objid(*%2))];[setq(magnitude, %3)];[setq(private, %1)];@assert [match(trivial minor major life, lcstr(r(magnitude)))] = @pemit %#=The magnitude of a boon must be one of trivial, minor, major or life.;[setq(validated, 1)];[setq(response, [execscript(u(con.script.path), addNewBoonToDB)])];@assert !eq(0, r(response))={@pemit %#=There was an error adding this boon.; @pemit %#=[r(response)]};@pemit %#=A [r(magnitude)] boon was added to the ledger from [name(r(from))] to [name(r(to))];
@set boons wrapper/CMD.BOON.GRANT = regexp
&INC.BOONS.GROUP.FORMAT boons wrapper=[setq(title, ifelse(index(%0,>,3,1),Creditor,Debtor))][center(index(%0,>,1,1),[u(con.boons.wrap)],-)]%r[printf(|$-3s|$-20s|$-10s|$-29s|$-10s|,id,[r(title)],Magnitude,Date,Discharged)]%r[repeat(-,[u(con.boons.wrap)])]%r[parse(index(%0,>,2,1),printf(|$-3s|$-20s|$-10s|$-29s|$-10s|,index(##,|,1,1),name(index(##,|,2,1)),[ansi(ifelse(index(##,|,4,1),hg,ifelse(index(##,|,5,1),hy,hr)), capstr(index(##,|,3,1)))],convsecs(index(##,|,6,1)),[ifelse(index(##,|,8,1),Yes,No)]),~,%r)]%r[repeat(=,[u(con.boons.wrap)])]
&TXT.BOONS.KEY boons wrapper=Boons in %xg%xhGreen%xn have been vetted by a harpy.%rBoons in %xh%xyyellow%xn have been agreed upon by players, but not a harpy.%rBoons in %xr%xhred%xn have been requested of a player but neither vetted by a harpy nor agreed upon by the players.%rBoons in %xccyan%xn are boons that have been %xhgranted%xn privately and exist outside of the harpy system.
&CON.BOONS.WRAP boons wrapper=78
&CMD.BOON.CLAIM boons wrapper=$+boon/claim *=*:@assert !comp(type(*%0), PLAYER)=@pemit %#=%0 is not a player.;[setq(to, objid(%#))];[setq(from, objid(*%0))];[setq(magnitude, %1)];@assert [match(trivial minor major life, lcstr(r(magnitude)))] = @pemit %#=The magnitude of a boon must be one of trivial, minor, major or life.;[setq(response, [execscript(u(con.script.path), addNewBoonToDB)])];@assert !eq(0, r(response))={@pemit %#=There was an error adding this boon.; @pemit %#=[r(response)]};@pemit %#=A [r(magnitude)] boon was added to the ledger from [name(r(from))] to [name(r(to))] but it requires [name(r(from))] to %xhvalidate%xn it with %xh+boon/validate [r(response)];
&CMD.BOON.VALIDATE boons wrapper=$+boon/validate *:[setq(id, %0)];[setq(player, objid(%#))];@pemit %#=[ifelse([execscript(u(con.script.path), validateBoon)],You have validated boon [r(id)],You could not validate boon [r(id)])]
&CMD.BOON.REJECT boons wrapper=$+boon/reject *:[setq(id, %0)];[setq(player, objid(%#))];@pemit %#=[ifelse(lt(0,setr(response, execscript(u(con.script.path), rejectBoon))),You have rejected boon %0,[ifelse(gt(0,r(response)),You could not reject boon %0. It may have been validated%, acknowledged%, or not yours to reject.,There was an error rejecting boon %0)])]%r[r(response)]
&CMD.BOON.ACKNOWLEDGE boons wrapper=$+boon/acknowledge *:@assert [u(%#/_is_harpy)]=@pemit %#=You need to be a harpy to do that.;[setq(id, %0)];@pemit %#=[ifelse([execscript(u(con.script.path), acknowledgeBoon)],You have acknowledged boon [r(id)],You could not acknowledge boon [r(id)])]
&CMD.BOONS.LEDGER boons wrapper=$+boon/ledger *:@assert [u(%#/_is_harpy)]=@pemit %#=You need to be a harpy to do that.;[setq(player, [objid(*%0)])];[setq(response, [execscript(u(con.script.path), harpyLedger)])];@pemit %#=[center(Boons for %n,[u(con.boons.wrap)],=)]%r[parse(r(response), u(inc.boons.group.format, ##),^,%r)]%r[wrap(u(txt.boons.key),[u(con.boons.wrap)])]
&CMD.BOON.TRANSFER boons wrapper=$+boon/transfer *=*:[setq(idBoons, %0)];[setq(playerFrom, [objid(%#)])];[setq(playerTo, objid(*%1))];[setq(response, execscript(u(con.script.path), transferBoon))];@pemit %#=[ifelse(gt(r(response),0),You have successfully transferred boon %0 to %1,You could not transfer boon %0 to %1)]
&CMD.BOON.HISTORY boons wrapper=$+boon/transferHistory *:@assert [u(%#/_is_harpy)]=@pemit %#=You need to be a harpy to do that.;[setq(idBoons, %0)];[setq(response, [execscript(u(con.script.path), boonTransferHistory)])];@pemit %#=[repeat(-,[u(con.boons.wrap)])]%r|[center(History for boon %0,76)]|%r[repeat(-,[u(con.boons.wrap)])]%r[printf(|$-25s|$-25s|$-24s|,From,To,Date)]%r[repeat(-,[u(con.boons.wrap)])]%r[parse(r(response),[printf(|$-25s|$-25s|$-24s|,name(index(##,|,1,1)),name(index(##,|,2,1)),convsecs(index(##,|,3,1)))],~,%r)]%r[repeat(-,[u(con.boons.wrap)])]
&CMD.BOONS.DISCHARGE boons wrapper=$+boon/discharge *:[setq(player, objid(%#))];[setq(idBoons, %0)];[setr(response, [execscript(u(con.script.path), dischargeBoon)])];@pemit %#=[r(response)]
&CMD.BOONS.HELP boons wrapper=$+boon/help:@pemit %#=u(con.boons.help)
&CON.BOONS.HELP boons wrapper=[center(%xhBoons Help%xn,80,=)]%r%xh+boon/ledger%xn: Shows your entire boon ledger%r%xh+boon/ledger <player>%xn*: Shows the boon ledger for a given player%r%xh+boon/grant[/private] <player>=<magnitude>%xn: Grants <player> a <magnitude> boon. The boon goes into the ledger as validated, but not acknowledged.%rAcknowledgement of a boon requires a Harpy.%rValid boon magnitudes are trivial, minor, major and life.%r%xh+boon/claim <player>=<magnitude>%xn: Claims a boon from <player>. It is not validated and cannot be private.%r%xh+boon/reject <boon id>%xn: Rejects a non-validated, non-acknowledged boon that a player has claimed against you.%r%xh+boon/validate <boon id>%xn: Validates a boon that has been %xhclaim%xned against you.%r%xh+boon/acknowledge <boon id>%xn*: Marks a boon as acknowledged by a Harpy%r%xh+boon/transfer <boon id>=<player>%xn: Transfers a boon to player by its id. The boon cannot have been discharged%r%xh+boon/transferHistory <boon id>%xn*: Views the transfer history for a given boon.%r%rCommands marked with a * can only be run by a harpy.
&CMD.BOONS.MYLEDGER boons wrapper=$+boon/ledger:[setq(player, [objid(%#)])];[setq(response, [execscript(u(con.script.path), showBoons)])];@pemit %#=[center(Boons for %n,[u(con.boons.wrap)],=)]%r[parse(r(response), u(inc.boons.group.format, ##),^,%r)]%r[wrap(u(txt.boons.key),[u(con.boons.wrap)])]
@set boons wrapper=ARCHITECT SAFE INHERIT SIDEFX
@power/councilor boons wrapper=EXECSCRIPT